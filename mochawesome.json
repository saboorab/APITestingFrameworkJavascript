{
  "stats": {
    "suites": 6,
    "tests": 39,
    "passes": 33,
    "pending": 0,
    "failures": 6,
    "start": "2021-12-22T15:14:25.931Z",
    "end": "2021-12-22T15:15:33.197Z",
    "duration": 67266,
    "testsRegistered": 39,
    "passPercent": 84.61538461538461,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4f140f09-844e-48ce-9725-7c4d0986dd40",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: should generate token in \"{root}\"",
          "fullTitle": "\"before all\" hook: should generate token in \"{root}\"",
          "timedOut": false,
          "duration": 2572,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
          "err": {},
          "uuid": "e38bce7f-26ee-4c8b-8099-30d48e9c4ca0",
          "parentUUID": "4f140f09-844e-48ce-9725-7c4d0986dd40",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d4f45942-525f-4744-825c-d956cf41cff9",
          "title": "'Postive API Test', function()",
          "fullFile": "C:\\Users\\HP\\super-api-tests\\src\\test\\test.js",
          "file": "\\src\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "LOCAL, US, valid accountName(length(2,10)), valid accountNumber(length(1,17)), aba code with length(9)",
              "fullTitle": "'Postive API Test', function() LOCAL, US, valid accountName(length(2,10)), valid accountNumber(length(1,17)), aba code with length(9)",
              "timedOut": false,
              "duration": 3140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
              "err": {},
              "uuid": "19d4b814-c6a9-4059-9990-f1a93a4866c7",
              "parentUUID": "d4f45942-525f-4744-825c-d956cf41cff9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SWIFT, AU, valid accountName(length(2,10)), valid accountNumber(length(6,9)), bsb code with length(6), swiftCode(length(8)",
              "fullTitle": "'Postive API Test', function() SWIFT, AU, valid accountName(length(2,10)), valid accountNumber(length(6,9)), bsb code with length(6), swiftCode(length(8)",
              "timedOut": false,
              "duration": 1803,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
              "err": {},
              "uuid": "12f9b2d4-f7da-44dc-b87e-c5263d2e97b6",
              "parentUUID": "d4f45942-525f-4744-825c-d956cf41cff9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SWIFT, CN, valid accountName(length(2, 10)), valid accountNumber(length(8, 20)),swiftCode(length(8)",
              "fullTitle": "'Postive API Test', function() SWIFT, CN, valid accountName(length(2, 10)), valid accountNumber(length(8, 20)),swiftCode(length(8)",
              "timedOut": false,
              "duration": 2475,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
              "err": {},
              "uuid": "751d9295-de26-4461-bfd9-5b04c7abb816",
              "parentUUID": "d4f45942-525f-4744-825c-d956cf41cff9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SWIFT, US, valid accountName(length(2, 10)), valid accountNumber(length(1, 17)), aba code with length(9), swiftCode(length(8))",
              "fullTitle": "'Postive API Test', function() SWIFT, US, valid accountName(length(2, 10)), valid accountNumber(length(1, 17)), aba code with length(9), swiftCode(length(8))",
              "timedOut": false,
              "duration": 1623,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
              "err": {},
              "uuid": "2bcbb5fb-9439-45a1-a1ee-b82b38287ce9",
              "parentUUID": "d4f45942-525f-4744-825c-d956cf41cff9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SWIFT, US, valid accountName(length(2, 10)), valid accountNumber(length(1, 17)), aba code with length(9), swiftCode(length(11)))",
              "fullTitle": "'Postive API Test', function() SWIFT, US, valid accountName(length(2, 10)), valid accountNumber(length(1, 17)), aba code with length(9), swiftCode(length(11)))",
              "timedOut": false,
              "duration": 968,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
              "err": {},
              "uuid": "4dd280af-48cf-4dbe-b6c5-5f0e00da9b2e",
              "parentUUID": "d4f45942-525f-4744-825c-d956cf41cff9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SWIFT, AU, valid accountName(length(2, 10)), valid accountNumber(length(6, 9)), bsb code with length(6), swiftCode(length(11))",
              "fullTitle": "'Postive API Test', function() SWIFT, AU, valid accountName(length(2, 10)), valid accountNumber(length(6, 9)), bsb code with length(6), swiftCode(length(11))",
              "timedOut": false,
              "duration": 2121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
              "err": {},
              "uuid": "66f79c25-1479-4592-a6dc-0a5e37d62cc2",
              "parentUUID": "d4f45942-525f-4744-825c-d956cf41cff9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SWIFT, CN, valid accountName(length(2, 10)), valid accountNumber(length(8, 20)), swiftCode(length(11))",
              "fullTitle": "'Postive API Test', function() SWIFT, CN, valid accountName(length(2, 10)), valid accountNumber(length(8, 20)), swiftCode(length(11))",
              "timedOut": false,
              "duration": 1345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
              "err": {},
              "uuid": "1ead0a22-5bf3-4edb-8441-ec0a0df70fb3",
              "parentUUID": "d4f45942-525f-4744-825c-d956cf41cff9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "19d4b814-c6a9-4059-9990-f1a93a4866c7",
            "12f9b2d4-f7da-44dc-b87e-c5263d2e97b6",
            "751d9295-de26-4461-bfd9-5b04c7abb816",
            "2bcbb5fb-9439-45a1-a1ee-b82b38287ce9",
            "4dd280af-48cf-4dbe-b6c5-5f0e00da9b2e",
            "66f79c25-1479-4592-a6dc-0a5e37d62cc2",
            "1ead0a22-5bf3-4edb-8441-ec0a0df70fb3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13475,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "70318f4a-a6ba-48b8-b04b-04bb31a227dd",
          "title": "Negative API Test', function()",
          "fullFile": "C:\\Users\\HP\\super-api-tests\\src\\test\\test.js",
          "file": "\\src\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b2cf8031-3c19-49d5-8add-cdf6ddd495fc",
              "title": "Empty Value of parameters",
              "fullFile": "C:\\Users\\HP\\super-api-tests\\src\\test\\test.js",
              "file": "\\src\\test\\test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Lack of  payment_method parameter",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters Lack of  payment_method parameter",
                  "timedOut": false,
                  "duration": 1926,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "b3d595df-3f23-4c67-8511-972f78a58d75",
                  "parentUUID": "b2cf8031-3c19-49d5-8add-cdf6ddd495fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "bank_country_code is required",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters bank_country_code is required",
                  "timedOut": false,
                  "duration": 1714,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "e2444364-b418-4ea5-b065-5103dafd18b5",
                  "parentUUID": "b2cf8031-3c19-49d5-8add-cdf6ddd495fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Account_Name is required",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters Account_Name is required",
                  "timedOut": false,
                  "duration": 1868,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "562be9c4-ae9c-496a-b432-a350df122d0f",
                  "parentUUID": "b2cf8031-3c19-49d5-8add-cdf6ddd495fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Account_Number is required",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters Account_Number is required",
                  "timedOut": false,
                  "duration": 2227,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "dc607887-4bc9-4a32-b66d-624ad6f1e340",
                  "parentUUID": "b2cf8031-3c19-49d5-8add-cdf6ddd495fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "SWIFT code is required - US",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters SWIFT code is required - US",
                  "timedOut": false,
                  "duration": 1881,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "6023f89a-ddb4-49da-80f1-63ce4037c9f6",
                  "parentUUID": "b2cf8031-3c19-49d5-8add-cdf6ddd495fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "SWIFT code is required - AU",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters SWIFT code is required - AU",
                  "timedOut": false,
                  "duration": 1859,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "f66cf262-519b-465a-9acf-11aa67b6e42c",
                  "parentUUID": "b2cf8031-3c19-49d5-8add-cdf6ddd495fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "\"SWift code is required - CN\"",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters \"SWift code is required - CN\"",
                  "timedOut": false,
                  "duration": 1742,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "f4bfe2b8-0020-42ea-a94d-08337a10ec44",
                  "parentUUID": "b2cf8031-3c19-49d5-8add-cdf6ddd495fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "\"Lack of aba when bank_country_code is US\"",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters \"Lack of aba when bank_country_code is US\"",
                  "timedOut": false,
                  "duration": 1511,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "b0c6cac9-7507-4d4f-84f6-10736cd85870",
                  "parentUUID": "b2cf8031-3c19-49d5-8add-cdf6ddd495fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "\"Lack of bsb when bank_country_code is AU\"",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters \"Lack of bsb when bank_country_code is AU\"",
                  "timedOut": false,
                  "duration": 1118,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "d74f63d7-21e8-4aa8-8406-fc7a7ec0ef1a",
                  "parentUUID": "b2cf8031-3c19-49d5-8add-cdf6ddd495fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3d595df-3f23-4c67-8511-972f78a58d75",
                "e2444364-b418-4ea5-b065-5103dafd18b5",
                "562be9c4-ae9c-496a-b432-a350df122d0f",
                "dc607887-4bc9-4a32-b66d-624ad6f1e340",
                "6023f89a-ddb4-49da-80f1-63ce4037c9f6",
                "f66cf262-519b-465a-9acf-11aa67b6e42c",
                "f4bfe2b8-0020-42ea-a94d-08337a10ec44",
                "b0c6cac9-7507-4d4f-84f6-10736cd85870",
                "d74f63d7-21e8-4aa8-8406-fc7a7ec0ef1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15846,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0660b919-2315-43ad-bbae-a1514e4d83b9",
              "title": "Empty Value of parameters",
              "fullFile": "C:\\Users\\HP\\super-api-tests\\src\\test\\test.js",
              "file": "\\src\\test\\test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "payment_method parameter should not be empty",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters payment_method parameter should not be empty",
                  "timedOut": false,
                  "duration": 1433,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "b9e3b7ef-9b30-46fd-8fab-d99a313131e9",
                  "parentUUID": "0660b919-2315-43ad-bbae-a1514e4d83b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "\"bank_country_code parameter should not be empty\"",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters \"bank_country_code parameter should not be empty\"",
                  "timedOut": false,
                  "duration": 1587,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "043333b3-fa3c-41c8-bc0e-6b3552271b22",
                  "parentUUID": "0660b919-2315-43ad-bbae-a1514e4d83b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "\"account_name parameter value should not be empty\"",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters \"account_name parameter value should not be empty\"",
                  "timedOut": false,
                  "duration": 1031,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "f3990598-6b8e-4973-8fc7-5d70204308f3",
                  "parentUUID": "0660b919-2315-43ad-bbae-a1514e4d83b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "\"account_number should not be empty\"",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters \"account_number should not be empty\"",
                  "timedOut": false,
                  "duration": 946,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "6e7db7fc-7bb7-4388-bdff-c8d31f5780c2",
                  "parentUUID": "0660b919-2315-43ad-bbae-a1514e4d83b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "\"Swift code should not be empty\"",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters \"Swift code should not be empty\"",
                  "timedOut": false,
                  "duration": 929,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "1280e355-5a34-437e-bb24-74d5448d7f6f",
                  "parentUUID": "0660b919-2315-43ad-bbae-a1514e4d83b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "\"aba number should not empty when country is US - local\"",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters \"aba number should not empty when country is US - local\"",
                  "timedOut": false,
                  "duration": 1004,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {
                    "message": "AssertionError: expected 201 to equal 400",
                    "estack": "AssertionError: expected 201 to equal 400\n    at _callee23$ (src\\test\\/test.js:447:44)\n    at tryCatch (node_modules\\regenerator-runtime\\runtime.js:63:40)\n    at Generator.invoke [as _invoke] (node_modules\\regenerator-runtime\\runtime.js:294:22)\n    at Generator.next (node_modules\\regenerator-runtime\\runtime.js:119:21)\n    at asyncGeneratorStep (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:3:24)\n    at _next (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:25:9)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                    "diff": "- 201\n+ 400\n"
                  },
                  "uuid": "1a8e278f-54b5-452e-a157-30b44b6873fc",
                  "parentUUID": "0660b919-2315-43ad-bbae-a1514e4d83b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "bsb Paramtere value should be provided when bank_country_code is AU\"\"",
                  "fullTitle": "Negative API Test', function() Empty Value of parameters bsb Paramtere value should be provided when bank_country_code is AU\"\"",
                  "timedOut": false,
                  "duration": 2352,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "61469266-d3d6-4dff-99aa-fae07b16ee9b",
                  "parentUUID": "0660b919-2315-43ad-bbae-a1514e4d83b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9e3b7ef-9b30-46fd-8fab-d99a313131e9",
                "043333b3-fa3c-41c8-bc0e-6b3552271b22",
                "f3990598-6b8e-4973-8fc7-5d70204308f3",
                "6e7db7fc-7bb7-4388-bdff-c8d31f5780c2",
                "1280e355-5a34-437e-bb24-74d5448d7f6f",
                "61469266-d3d6-4dff-99aa-fae07b16ee9b"
              ],
              "failures": [
                "1a8e278f-54b5-452e-a157-30b44b6873fc"
              ],
              "pending": [],
              "skipped": [],
              "duration": 9282,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "83369826-c5b4-456a-a3a4-b7b3571470a6",
              "title": "Invalid value of parameters",
              "fullFile": "C:\\Users\\HP\\super-api-tests\\src\\test\\test.js",
              "file": "\\src\\test\\test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invalid value of payment_method, neither LOCAL or SWIFT",
                  "fullTitle": "Negative API Test', function() Invalid value of parameters invalid value of payment_method, neither LOCAL or SWIFT",
                  "timedOut": false,
                  "duration": 1528,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "34bcb19c-5027-4bf3-86b5-e1b5e2850114",
                  "parentUUID": "83369826-c5b4-456a-a3a4-b7b3571470a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid value of payment_method, SWIFT",
                  "fullTitle": "Negative API Test', function() Invalid value of parameters invalid value of payment_method, SWIFT",
                  "timedOut": false,
                  "duration": 1402,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "ac58e1cb-4002-4468-b79b-aa7bf2300f66",
                  "parentUUID": "83369826-c5b4-456a-a3a4-b7b3571470a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid value of payment_method, LOCAL",
                  "fullTitle": "Negative API Test', function() Invalid value of parameters invalid value of payment_method, LOCAL",
                  "timedOut": false,
                  "duration": 1429,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "0bed1855-ce59-4c9e-bdf8-9ac5c41be9e2",
                  "parentUUID": "83369826-c5b4-456a-a3a4-b7b3571470a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid value of bank_country_code, neither 'US' or 'AU', nor 'CN' in case of SWIFT",
                  "fullTitle": "Negative API Test', function() Invalid value of parameters invalid value of bank_country_code, neither 'US' or 'AU', nor 'CN' in case of SWIFT",
                  "timedOut": false,
                  "duration": 1685,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "fb3d0a6d-2977-443f-b706-cab34a3efa7b",
                  "parentUUID": "83369826-c5b4-456a-a3a4-b7b3571470a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid value of bank_country_code, neither 'US' or 'AU', nor 'CN' in case of LOCAL",
                  "fullTitle": "Negative API Test', function() Invalid value of parameters invalid value of bank_country_code, neither 'US' or 'AU', nor 'CN' in case of LOCAL",
                  "timedOut": false,
                  "duration": 1640,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {},
                  "uuid": "6864ab4d-8a21-444e-829b-431e97bc5bbd",
                  "parentUUID": "83369826-c5b4-456a-a3a4-b7b3571470a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid value of swift_code when payment_method is 'SWIFT'",
                  "fullTitle": "Negative API Test', function() Invalid value of parameters invalid value of swift_code when payment_method is 'SWIFT'",
                  "timedOut": false,
                  "duration": 1894,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                  "err": {
                    "message": "AssertionError: expected 201 to equal 400",
                    "estack": "AssertionError: expected 201 to equal 400\n    at _callee30$ (src\\test\\/test.js:575:44)\n    at tryCatch (node_modules\\regenerator-runtime\\runtime.js:63:40)\n    at Generator.invoke [as _invoke] (node_modules\\regenerator-runtime\\runtime.js:294:22)\n    at Generator.next (node_modules\\regenerator-runtime\\runtime.js:119:21)\n    at asyncGeneratorStep (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:3:24)\n    at _next (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:25:9)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                    "diff": "- 201\n+ 400\n"
                  },
                  "uuid": "045f7c0e-6083-4788-88f7-08e3e21b5108",
                  "parentUUID": "83369826-c5b4-456a-a3a4-b7b3571470a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "e1a0256d-233b-42d2-8fe5-eff3aa00bc73",
                  "title": "Invalid length of parameters",
                  "fullFile": "C:\\Users\\HP\\super-api-tests\\src\\test\\test.js",
                  "file": "\\src\\test\\test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Invalid length of account_name, less than 2",
                      "fullTitle": "Negative API Test', function() Invalid value of parameters Invalid length of parameters Invalid length of account_name, less than 2",
                      "timedOut": false,
                      "duration": 1820,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                      "err": {},
                      "uuid": "a241ba2b-94da-499b-b31d-88ab4e398069",
                      "parentUUID": "e1a0256d-233b-42d2-8fe5-eff3aa00bc73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid length of account_name, more than 10",
                      "fullTitle": "Negative API Test', function() Invalid value of parameters Invalid length of parameters Invalid length of account_name, more than 10",
                      "timedOut": false,
                      "duration": 1769,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                      "err": {
                        "message": "AssertionError: expected 201 to equal 400",
                        "estack": "AssertionError: expected 201 to equal 400\n    at _callee32$ (src\\test\\/test.js:611:48)\n    at tryCatch (node_modules\\regenerator-runtime\\runtime.js:63:40)\n    at Generator.invoke [as _invoke] (node_modules\\regenerator-runtime\\runtime.js:294:22)\n    at Generator.next (node_modules\\regenerator-runtime\\runtime.js:119:21)\n    at asyncGeneratorStep (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:3:24)\n    at _next (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:25:9)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                        "diff": "- 201\n+ 400\n"
                      },
                      "uuid": "25863fc3-dc50-4559-88eb-9d0d970bd062",
                      "parentUUID": "e1a0256d-233b-42d2-8fe5-eff3aa00bc73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid length of account_number when bank_country_code is US, more than 17",
                      "fullTitle": "Negative API Test', function() Invalid value of parameters Invalid length of parameters Invalid length of account_number when bank_country_code is US, more than 17",
                      "timedOut": false,
                      "duration": 1511,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                      "err": {},
                      "uuid": "a00ef583-72a9-430e-8554-154b80bd61b5",
                      "parentUUID": "e1a0256d-233b-42d2-8fe5-eff3aa00bc73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid length of account_number when bank_country_code is AU, less than 6",
                      "fullTitle": "Negative API Test', function() Invalid value of parameters Invalid length of parameters Invalid length of account_number when bank_country_code is AU, less than 6",
                      "timedOut": false,
                      "duration": 1651,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                      "err": {},
                      "uuid": "60bde198-b310-4c67-a65d-b82a30478e3a",
                      "parentUUID": "e1a0256d-233b-42d2-8fe5-eff3aa00bc73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid length of account_number when bank_country_code is AU, more than 9",
                      "fullTitle": "Negative API Test', function() Invalid value of parameters Invalid length of parameters Invalid length of account_number when bank_country_code is AU, more than 9",
                      "timedOut": false,
                      "duration": 1756,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                      "err": {
                        "message": "AssertionError: expected 201 to equal 400",
                        "estack": "AssertionError: expected 201 to equal 400\n    at _callee35$ (src\\test\\/test.js:667:48)\n    at tryCatch (node_modules\\regenerator-runtime\\runtime.js:63:40)\n    at Generator.invoke [as _invoke] (node_modules\\regenerator-runtime\\runtime.js:294:22)\n    at Generator.next (node_modules\\regenerator-runtime\\runtime.js:119:21)\n    at asyncGeneratorStep (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:3:24)\n    at _next (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:25:9)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                        "diff": "- 201\n+ 400\n"
                      },
                      "uuid": "f1144388-5c6e-4bb5-b89c-2024400208e0",
                      "parentUUID": "e1a0256d-233b-42d2-8fe5-eff3aa00bc73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid length of account_number when bank_country_code is CN, less than 8",
                      "fullTitle": "Negative API Test', function() Invalid value of parameters Invalid length of parameters Invalid length of account_number when bank_country_code is CN, less than 8",
                      "timedOut": false,
                      "duration": 1334,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                      "err": {},
                      "uuid": "f56f10ed-1cf8-438f-b162-6a456e4ce135",
                      "parentUUID": "e1a0256d-233b-42d2-8fe5-eff3aa00bc73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid length of account_number when bank_country_code is CN, greater than 20",
                      "fullTitle": "Negative API Test', function() Invalid value of parameters Invalid length of parameters Invalid length of account_number when bank_country_code is CN, greater than 20",
                      "timedOut": false,
                      "duration": 1818,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                      "err": {
                        "message": "AssertionError: expected 201 to equal 400",
                        "estack": "AssertionError: expected 201 to equal 400\n    at _callee37$ (src\\test\\/test.js:705:48)\n    at tryCatch (node_modules\\regenerator-runtime\\runtime.js:63:40)\n    at Generator.invoke [as _invoke] (node_modules\\regenerator-runtime\\runtime.js:294:22)\n    at Generator.next (node_modules\\regenerator-runtime\\runtime.js:119:21)\n    at asyncGeneratorStep (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:3:24)\n    at _next (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:25:9)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                        "diff": "- 201\n+ 400\n"
                      },
                      "uuid": "e0340ac6-d68b-4d26-8932-4c4c3206dd36",
                      "parentUUID": "e1a0256d-233b-42d2-8fe5-eff3aa00bc73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid length of swift_code(neither 8 or 11)",
                      "fullTitle": "Negative API Test', function() Invalid value of parameters Invalid length of parameters Invalid length of swift_code(neither 8 or 11)",
                      "timedOut": false,
                      "duration": 1308,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                      "err": {},
                      "uuid": "5d5e22e7-5354-4561-84ee-ee8c46bf7365",
                      "parentUUID": "e1a0256d-233b-42d2-8fe5-eff3aa00bc73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid length of bsb(not 6) when bank_country_code is 'AU'",
                      "fullTitle": "Negative API Test', function() Invalid value of parameters Invalid length of parameters Invalid length of bsb(not 6) when bank_country_code is 'AU'",
                      "timedOut": false,
                      "duration": 2024,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                      "err": {
                        "message": "AssertionError: expected 201 to equal 400",
                        "estack": "AssertionError: expected 201 to equal 400\n    at _callee39$ (src\\test\\/test.js:740:48)\n    at tryCatch (node_modules\\regenerator-runtime\\runtime.js:63:40)\n    at Generator.invoke [as _invoke] (node_modules\\regenerator-runtime\\runtime.js:294:22)\n    at Generator.next (node_modules\\regenerator-runtime\\runtime.js:119:21)\n    at asyncGeneratorStep (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:3:24)\n    at _next (node_modules\\@babel\\runtime\\helpers\\asyncToGenerator.js:25:9)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                        "diff": "- 201\n+ 400\n"
                      },
                      "uuid": "eeec5e28-364d-42a6-bfa7-c32cfadd8e70",
                      "parentUUID": "e1a0256d-233b-42d2-8fe5-eff3aa00bc73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid length of aba(not 9) when bank_country_code is 'US'",
                      "fullTitle": "Negative API Test', function() Invalid value of parameters Invalid length of parameters Invalid length of aba(not 9) when bank_country_code is 'US'",
                      "timedOut": false,
                      "duration": 1064,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var self = this,\n    args = arguments;\nreturn new Promise(function (resolve, reject) {\n  var gen = fn.apply(self, args);\n  function _next(value) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n  }\n  function _throw(err) {\n    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n  }\n  _next(undefined);\n});",
                      "err": {},
                      "uuid": "f1e74e43-6f42-4823-a2ba-6b4fb5be7ca0",
                      "parentUUID": "e1a0256d-233b-42d2-8fe5-eff3aa00bc73",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a241ba2b-94da-499b-b31d-88ab4e398069",
                    "a00ef583-72a9-430e-8554-154b80bd61b5",
                    "60bde198-b310-4c67-a65d-b82a30478e3a",
                    "f56f10ed-1cf8-438f-b162-6a456e4ce135",
                    "5d5e22e7-5354-4561-84ee-ee8c46bf7365",
                    "f1e74e43-6f42-4823-a2ba-6b4fb5be7ca0"
                  ],
                  "failures": [
                    "25863fc3-dc50-4559-88eb-9d0d970bd062",
                    "f1144388-5c6e-4bb5-b89c-2024400208e0",
                    "e0340ac6-d68b-4d26-8932-4c4c3206dd36",
                    "eeec5e28-364d-42a6-bfa7-c32cfadd8e70"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 16055,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 10000
                }
              ],
              "passes": [
                "34bcb19c-5027-4bf3-86b5-e1b5e2850114",
                "ac58e1cb-4002-4468-b79b-aa7bf2300f66",
                "0bed1855-ce59-4c9e-bdf8-9ac5c41be9e2",
                "fb3d0a6d-2977-443f-b706-cab34a3efa7b",
                "6864ab4d-8a21-444e-829b-431e97bc5bbd"
              ],
              "failures": [
                "045f7c0e-6083-4788-88f7-08e3e21b5108"
              ],
              "pending": [],
              "skipped": [],
              "duration": 9578,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}